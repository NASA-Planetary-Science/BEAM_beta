# DM Olson March 29, 2018
# This is a sample pbs script for running BEAM model on pleides 
# This script specifies the broadwell nodes
# we request 1 node and  28 MPI processes per node per target
# we iterate over 300 targets and use the 'normal' queue to 
# ensure we get enough wall time 

#PBS -l select=1:ncpus=28:model=bro
#PBS -l walltime=08:00:00
#PBS -j oe
#PBS -W group_list=g26171
#PBS -m e

# Load gcc, MPI compiler, and python interpreter

module load gcc/4.9.3
module load mpi-sgi/mpt.2.15r20  # most current version of sgi mpt
module load python/2.7.12         # load python 2.7 interpreter

# before running script 
# compile beam code with gfortran

# gfortran -O3 -I/nasa/sgi/mpt/2.15r20/include -o ../bin/mc_mpix mc_mpi.F90 -lmpi

# the particle setup code can be compiled directly with gfortran
# gfortran -O3 make_particles_wakes.F90 -o ../bin/wakex

# define some parameters to form input filenames and destination directory
set alpha=20
set density=D01
set optdepth=tau10
set shaparam=sha100
set prefile=mc-beamS0Phase
# LitGeom suffix means both sun and observer are on the same side of ring plane
set postfile=${optdepth}${density}LitGeom.in 
set beamDir=`pwd`   # set base directory for beam software
set MAXITER=300 # set upper limit of loop

cd /home1/dmolson/Radiative_transfer/MonteCarlo/
mkdir -p /nobackupp8/dmolson/Ntarg300${density}${optdepth}_S0_phase${alpha}${shaparam}
cd /nobackupp8/dmolson/Ntarg300${density}${optdepth}_S0_phase${alpha}${shaparam}

#copy empty flux_sum.out if_sum.out files
cp $beamDir/input/flux_sum.out .
cp $beamDir/input/if_sum.out .

# create symbolic link to input file for BEAM code
ln -s $beamDir/input/$prefile$alpha$shaparam$postfile input_file.in  

# loop over multiple targets

foreach iter (`seq 1 $MAXITER`)  # loop over targets

# run setup code for each iteration
$beamDir/bin/wakex < $beamDir/input/part-no_wakes${density}${optdepth}_nbins40.in > output_particles

mkdir -p resultfiles_targ$iter

cp output_particles resultfiles_targ$iter/

mpiexec -np 28 $beamDir/bin/mc_mpix

# put copies of current beam output files into subdirectory
cp if.out resultfiles_targ$iter/
cp flux.out resultfiles_targ$iter/
cp output resultfiles_targ$iter/
cp nphotpass.out resultfiles_targ$iter/

python $beamDir/python/SumFlux.py flux.out flux_sum.out if.out if_sum.out $iter $MAXITER

# replace files containg runing sum/aveage of flux and I/F
mv flux_new.out flux_sum.out
mv if_new.out if_sum.out

end # end of loop
# the  .in files contains input parameters and the screen messages are piped to 
# an output file 

# -end of script-
